#![allow(unused_assignments)]
use crate::*;
use std::slice::from_raw_parts as slice_from_raw;

static _111: usize = 0b_111;
static _010: usize = 0b_010;
static _101: usize = 0b_101;
static _000: usize = 0b_000;
static _100: usize = 0b_100;

static _FAIL: usize = 0b_11100000;

#[test]
fn push() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::new();
    let proto = CProtoBitVec::<3>::PROTO;
    assert_bvec_state!("1", proto, bitvec, 0, 0, [0usize; 0]);
    bitvec.push(_111)?;
    assert_bvec_state!("2", proto, bitvec, 1, 21, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_111__usize]);
    bitvec.push(_010)?;
    assert_bvec_state!("3", proto, bitvec, 2, 21, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_010_111__usize]);
    bitvec.push(_111)?;
    assert_bvec_state!("4", proto, bitvec, 3, 21, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_111_010_111__usize]);
    bitvec.push(_010)?;
    assert_bvec_state!("5", proto, bitvec, 4, 21, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_010_111_010_111__usize]);
    bitvec.push(_111)?;
    bitvec.push(_010)?;
    bitvec.push(_111)?;
    bitvec.push(_010)?;
    bitvec.push(_111)?;
    bitvec.push(_010)?;
    bitvec.push(_111)?;
    bitvec.push(_010)?;
    bitvec.push(_111)?;
    bitvec.push(_010)?;
    bitvec.push(_111)?;
    bitvec.push(_010)?;
    bitvec.push(_111)?;
    bitvec.push(_010)?;
    bitvec.push(_111)?;
    bitvec.push(_010)?;
    bitvec.push(_111)?;
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0
    assert_bvec_state!("6", proto, bitvec, 21, 21, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize]);
    bitvec.push(_010)?;
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21
    assert_bvec_state!("7", proto, bitvec, 22, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_01__usize]);
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    bitvec.push(_101)?;
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21
    assert_bvec_state!("8", proto, bitvec, 42, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize]);
    bitvec.push(_100)?;
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("9", proto, bitvec, 43, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_1__usize]);
    let old_true_cap = bitvec.0.true_cap;
    bitvec.0.true_cap = BitProto::calc_block_count_from_bitwise_count(proto, proto.MAX_CAPACITY);
    bitvec.push(_100)?;
    //                                                                       21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("10", proto, bitvec, 44, proto.MAX_CAPACITY, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
    bitvec.0.len = proto.MAX_CAPACITY;
    assert_error!("11", bitvec.push(_100));
    bitvec.0.true_cap = old_true_cap;
    Ok(())
}

#[test]
fn pop() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::with_capacity(44);
    let proto = CProtoBitVec::<3>::PROTO;
    //                            21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(bitvec, 44, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("1", proto, bitvec, 44, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
    assert_val_result!("2", _100, bitvec.pop());
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("3", proto, bitvec, 43, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_1__usize]);
    assert_val_result!("4", _100, bitvec.pop());
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("5", proto, bitvec, 42, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize]);
    assert_val_result!("6", _101, bitvec.pop());
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("7", proto, bitvec, 41, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_000_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize]);
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    assert_val_result!("8", _010, bitvec.pop());
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("9", proto, bitvec, 21, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize]);
    assert_val_result!("10", _111, bitvec.pop());
    //                                              21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("11", proto, bitvec, 20, 64, [0b__0_000_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize]);
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    bitvec.pop()?;
    assert_val_result!("12", _111, bitvec.pop());
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("13", proto, bitvec, 0, 64, [0usize; 0]);
    assert_error!("14", bitvec.pop());
    Ok(())
}

#[test]
fn insert() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::new();
    let proto = CProtoBitVec::<3>::PROTO;
    assert_bvec_state!("1", proto, bitvec, 0, 0, [0usize; 0]);
    bitvec.insert(0, _111)?;
    assert_bvec_state!("2", proto, bitvec, 1, 21, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_111__usize]);
    bitvec.insert(1, _010)?;
    assert_bvec_state!("3", proto, bitvec, 2, 21, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_010_111__usize]);
    bitvec.insert(2, _111)?;
    assert_bvec_state!("4", proto, bitvec, 3, 21, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_111_010_111__usize]);
    bitvec.insert(3, _010)?;
    assert_bvec_state!("5", proto, bitvec, 4, 21, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_010_111_010_111__usize]);
    bitvec.insert(4, _111)?;
    bitvec.insert(5, _010)?;
    bitvec.insert(6, _111)?;
    bitvec.insert(7, _010)?;
    bitvec.insert(8, _111)?;
    bitvec.insert(9, _010)?;
    bitvec.insert(10, _111)?;
    bitvec.insert(11, _010)?;
    bitvec.insert(12, _111)?;
    bitvec.insert(13, _010)?;
    bitvec.insert(14, _111)?;
    bitvec.insert(15, _010)?;
    bitvec.insert(16, _111)?;
    bitvec.insert(17, _010)?;
    bitvec.insert(18, _111)?;
    bitvec.insert(19, _010)?;
    bitvec.insert(20, _111)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0
    assert_bvec_state!("6", proto, bitvec, 21, 21, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize]);
    bitvec.insert(21, _111)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21
    assert_bvec_state!("7", proto, bitvec, 22, 64, [0b__1_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_11__usize]);
    bitvec.insert(0,_101)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21
    assert_bvec_state!("8", proto, bitvec, 23, 64, [0b__1_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_101__usize, 0b__00_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_111_11__usize]);
    bitvec.insert(0,_101)?;
    bitvec.insert(1, _101)?;
    bitvec.insert(1, _101)?;
    bitvec.insert(2, _101)?;
    bitvec.insert(2, _101)?;
    bitvec.insert(3, _101)?;
    bitvec.insert(3, _101)?;
    bitvec.insert(4, _101)?;
    bitvec.insert(4, _101)?;
    bitvec.insert(5, _101)?;
    bitvec.insert(5, _101)?;
    bitvec.insert(6, _101)?;
    bitvec.insert(6, _101)?;
    bitvec.insert(7, _101)?;
    bitvec.insert(7, _101)?;
    bitvec.insert(8, _101)?;
    bitvec.insert(8, _101)?;
    bitvec.insert(9, _101)?;
    bitvec.insert(9, _101)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21
    assert_bvec_state!("9", proto, bitvec, 42, 64, [0b__0_111_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101__usize, 0b__00_111_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_01__usize]);
    bitvec.insert(0, _100)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("10", proto, bitvec, 43, 64, [0b__1_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_100__usize, 0b__11_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_11__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_1__usize]);
    let old_true_cap = bitvec.0.true_cap;
    bitvec.0.true_cap = BitProto::calc_block_count_from_bitwise_count(proto, proto.MAX_CAPACITY);
    bitvec.insert(42, _100)?;
    //                                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("11", proto, bitvec, 44, proto.MAX_CAPACITY, [0b__1_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_100__usize, 0b__00_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_11__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_111_1__usize]);
    assert_error!("12", bitvec.insert(99, _100));
    bitvec.0.len = proto.MAX_CAPACITY;
    assert_error!("12", bitvec.insert(0, _100));
    bitvec.0.true_cap = old_true_cap;
    Ok(())
}

#[test]
fn remove() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::with_capacity(44);
    let proto = CProtoBitVec::<3>::PROTO;
    //                            21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(bitvec, 44, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("1", proto, bitvec, 44, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
    assert_val_result!("2", _100, bitvec.remove(43));
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("3", proto, bitvec, 43, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_1__usize]);
    assert_val_result!("4", _100, bitvec.remove(42));
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("5", proto, bitvec, 42, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize]);
    assert_val_result!("6", _101, bitvec.remove(41));
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("7", proto, bitvec, 41, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_000_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize]);
    bitvec.remove(40)?;
    bitvec.remove(39)?;
    bitvec.remove(38)?;
    bitvec.remove(37)?;
    bitvec.remove(36)?;
    bitvec.remove(35)?;
    bitvec.remove(34)?;
    bitvec.remove(33)?;
    bitvec.remove(32)?;
    bitvec.remove(31)?;
    bitvec.remove(30)?;
    bitvec.remove(29)?;
    bitvec.remove(28)?;
    bitvec.remove(27)?;
    bitvec.remove(26)?;
    bitvec.remove(25)?;
    bitvec.remove(24)?;
    bitvec.remove(23)?;
    bitvec.remove(22)?;
    assert_val_result!("8", _010, bitvec.remove(21));
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("9", proto, bitvec, 21, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize]);
    assert_val_result!("10", _111, bitvec.remove(0));
    //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("11", proto, bitvec, 20, 64, [0b__0_000_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010__usize]);
    assert_val_result!("12", _010, bitvec.remove(0));
    //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("13", proto, bitvec, 19, 64, [0b__0_000_000_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize]);
    assert_val_result!("14", _111, bitvec.remove(0));
    //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("15", proto, bitvec, 18, 64, [0b__0_000_000_000_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010__usize]);
    assert_val_result!("16", _111, bitvec.remove(11));
    assert_val_result!("17", _010, bitvec.remove(11));
    assert_val_result!("18", _111, bitvec.remove(11));
    //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("19", proto, bitvec, 15, 64, [0b__0_000_000_000_000_000_000_111_010_111_010_010_111_010_111_010_111_010_111_010_111_010__usize]);
    assert_val_result!("20", _010, bitvec.remove(6));
    assert_val_result!("21", _111, bitvec.remove(6));
    assert_val_result!("22", _010, bitvec.remove(11));
    //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("23", proto, bitvec, 12, 64, [0b__0_000_000_000_000_000_000_000_000_000_111_111_010_010_111_010_111_010_111_010_111_010__usize]);
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    bitvec.remove(0)?;
    assert_error!("24", bitvec.remove(1));
    assert_val_result!("25", _111, bitvec.remove(0));
    //                                             21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("26", proto, bitvec, 0, 64, [0usize; 0]);
    assert_error!("27", bitvec.remove(0));
    Ok(())
}

#[test]
fn append_bitvec() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::with_capacity(64);
    let mut to_append_1 = CProtoBitVec::<3>::with_capacity(44);
    let mut to_append_2 = CProtoBitVec::<3>::with_capacity(33);
    let mut to_append_3 = CProtoBitVec::<3>::with_capacity(19);
    let empty_append = CProtoBitVec::<3>::new();
    let mut to_append_1_extra_a = CProtoBitVec::<3>::with_capacity(1);
    let mut to_append_1_extra_b = CProtoBitVec::<3>::with_capacity(1);
    to_append_1_extra_a.push(_111)?;
    to_append_1_extra_b.push(_111)?;
    let proto = CProtoBitVec::<3>::PROTO;
    //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(to_append_1, 44, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
    //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(to_append_2, 33, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110__usize, 0b__00_000_000_000_000_000_000_000_000_000_110_110_110_110_110_110_110_110_110_110_110_11__usize]);
    //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(to_append_3, 19, [0b__0_000_000_010_001_000_111_110_101_100_011_010_001_000_111_110_101_100_011_010_001_000__usize]);
    assert_bvec_state!("1", proto, bitvec, 0, 64, [0usize; 0]);
    bitvec.append_bitvec(to_append_1)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("2", proto, bitvec, 44, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
    bitvec.append_bitvec(to_append_2)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("3", proto, bitvec, 77, 128, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_100_1__usize, 0b__0_000_000_000_000_000_000_000_000_110_110_110_110_110_110_110_110_110_110_110_110_110__usize]);
    bitvec.append_bitvec(to_append_3)?;
    //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("4", proto, bitvec, 96, 128, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_100_1__usize, 0b__0_111_110_101_100_011_010_001_000_110_110_110_110_110_110_110_110_110_110_110_110_110__usize, 0b__00_000_000_000_000_000_000_000_000_000_000_010_001_000_111_110_101_100_011_010_001_00__usize]);
    let old_true_cap = bitvec.0.true_cap;
    bitvec.0.true_cap = BitProto::calc_block_count_from_bitwise_count(proto, proto.MAX_CAPACITY);
    bitvec.append_bitvec(to_append_1_extra_a)?;
    bitvec.0.len = proto.MAX_CAPACITY;
    bitvec.append_bitvec(empty_append)?;
    assert_error!("5", bitvec.append_bitvec(to_append_1_extra_b));
    bitvec.0.true_cap = old_true_cap;
    Ok(())
}

#[test]
fn append_iter() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::with_capacity(64);
    let mut to_append_1 = CProtoBitVec::<3>::with_capacity(44);
    let mut to_append_2 = CProtoBitVec::<3>::with_capacity(33);
    let mut to_append_3 = CProtoBitVec::<3>::with_capacity(19);
    let mut empty_append = CProtoBitVec::<3>::new();
    let mut to_append_1_extra_a = CProtoBitVec::<3>::with_capacity(1);
    let mut to_append_1_extra_b = CProtoBitVec::<3>::with_capacity(1);
    to_append_1_extra_a.push(_111)?;
    to_append_1_extra_b.push(_111)?;
    let proto = CProtoBitVec::<3>::PROTO;
    {
        //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        force_write!(to_append_1, 44, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
        //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        force_write!(to_append_2, 33, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110__usize, 0b__00_000_000_000_000_000_000_000_000_000_110_110_110_110_110_110_110_110_110_110_110_11__usize]);
        //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        force_write!(to_append_3, 19, [0b__0_000_000_010_001_000_111_110_101_100_011_010_001_000_111_110_101_100_011_010_001_000__usize]);
        let to_append_1 = to_append_1.drain();
        let to_append_2 = to_append_2.drain();
        let to_append_3 = to_append_3.drain();
        let empty_append = empty_append.drain();
        let to_append_1_extra_a = to_append_1_extra_a.drain();
        let to_append_1_extra_b = to_append_1_extra_b.drain();
        assert_bvec_state!("1", proto, bitvec, 0, 64, [0usize; 0]);
        bitvec.append_iter(to_append_1)?;
        //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        assert_bvec_state!("2", proto, bitvec, 44, 64, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
        bitvec.append_iter(to_append_2)?;
        //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        assert_bvec_state!("3", proto, bitvec, 77, 128, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_100_1__usize, 0b__0_000_000_000_000_000_000_000_000_110_110_110_110_110_110_110_110_110_110_110_110_110__usize]);
        bitvec.append_iter(to_append_3)?;
        //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        assert_bvec_state!("4", proto, bitvec, 96, 128, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_100_1__usize, 0b__0_111_110_101_100_011_010_001_000_110_110_110_110_110_110_110_110_110_110_110_110_110__usize, 0b__00_000_000_000_000_000_000_000_000_000_000_010_001_000_111_110_101_100_011_010_001_00__usize]);
        let old_true_cap = bitvec.0.true_cap;
        bitvec.0.true_cap = BitProto::calc_block_count_from_bitwise_count(proto, proto.MAX_CAPACITY);
        bitvec.append_iter(to_append_1_extra_a)?;
        bitvec.0.len = proto.MAX_CAPACITY;
        bitvec.append_iter(empty_append)?;
        assert_error!("5", bitvec.append_iter(to_append_1_extra_b));
        bitvec.0.true_cap = old_true_cap;
    }
    assert_bvec_state!("8", proto, to_append_1, 0, 64, [0usize; 0]);
    assert_bvec_state!("9", proto, to_append_2, 0, 42, [0usize; 0]);
    assert_bvec_state!("10", proto, to_append_3, 0, 21, [0usize; 0]);
    Ok(())
}

#[test]
fn insert_bitvec() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::with_capacity(66);
    let mut to_insert_1 = CProtoBitVec::<3>::with_capacity(44);
    let mut to_insert_2 = CProtoBitVec::<3>::with_capacity(33);
    let mut to_insert_3 = CProtoBitVec::<3>::with_capacity(19);
    let empty_insert = CProtoBitVec::<3>::new();
    let mut to_insert_1_extra_a = CProtoBitVec::<3>::with_capacity(1);
    let mut to_insert_1_extra_b = CProtoBitVec::<3>::with_capacity(1);
    let to_insert_1_extra_c = CProtoBitVec::<3>::with_capacity(1);
    to_insert_1_extra_a.push(_111)?;
    to_insert_1_extra_b.push(_111)?;
    let proto = CProtoBitVec::<3>::PROTO;
    //                          21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(bitvec, 2, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_001_001__usize]);
    //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(to_insert_1, 44, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
    //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(to_insert_2, 33, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110__usize, 0b__00_000_000_000_000_000_000_000_000_000_110_110_110_110_110_110_110_110_110_110_110_11__usize]);
    //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    force_write!(to_insert_3, 19, [0b__0_000_000_010_001_000_111_110_101_100_011_010_001_000_111_110_101_100_011_010_001_000__usize]);
    assert_bvec_state!("1", proto, bitvec, 2, 85, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_001_001__usize]);
    bitvec.insert_bitvec(1, to_insert_1)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("2", proto, bitvec, 46, 85, [0b__1_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_001__usize, 0b__01_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_010_11__usize, 0b___000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_001_100_100_1__usize]);
    bitvec.insert_bitvec(1, to_insert_2)?;
    //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("3", proto, bitvec, 79, 85, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_001__usize, 0b__11_010_111_010_111_010_111_010_111_110_110_110_110_110_110_110_110_110_110_110_110_11__usize, 0b___101_101_101_101_101_101_101_101_010_111_010_111_010_111_010_111_010_111_010_111_010_1__usize, 0b__0_000_000_000_000_000_000_001_100_100_101_101_101_101_101_101_101_101_101_101_101_101__usize]);
    bitvec.insert_bitvec(33, to_insert_3)?;
    //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("4", proto, bitvec, 98, 149, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_001__usize, 0b__01_000_111_110_101_100_011_010_001_000_110_110_110_110_110_110_110_110_110_110_110_11__usize, 0b___111_010_111_010_111_010_111_010_111_010_111_110_010_001_000_111_110_101_100_011_010_0__usize, 0b__1_101_101_101_101_101_101_101_101_101_101_010_111_010_111_010_111_010_111_010_111_010__usize, 0b__00_000_000_000_000_000_000_000_000_001_100_100_101_101_101_101_101_101_101_101_101_10__usize]);
    let old_true_cap = bitvec.0.true_cap;
    bitvec.0.true_cap = BitProto::calc_block_count_from_bitwise_count(proto, proto.MAX_CAPACITY);
    bitvec.insert_bitvec(0, to_insert_1_extra_a)?;
    //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
    assert_bvec_state!("5", proto, bitvec, 99, proto.MAX_CAPACITY, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_001_111__usize, 0b__00_111_110_101_100_011_010_001_000_110_110_110_110_110_110_110_110_110_110_110_110_11__usize, 0b___010_111_010_111_010_111_010_111_010_111_110_010_001_000_111_110_101_100_011_010_001_0__usize, 0b__1_101_101_101_101_101_101_101_101_101_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_000_000_000_000_000_000_000_001_100_100_101_101_101_101_101_101_101_101_101_101_10__usize]);
    assert_error!("6", bitvec.insert_bitvec(1000, to_insert_1_extra_c));
    bitvec.0.len = proto.MAX_CAPACITY;
    bitvec.insert_bitvec(0, empty_insert)?;
    assert_error!("7", bitvec.insert_bitvec(0, to_insert_1_extra_b));
    bitvec.0.true_cap = old_true_cap;
    Ok(())
}

#[test]
fn insert_iter() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::with_capacity(66);
    let mut to_insert_1 = CProtoBitVec::<3>::with_capacity(44);
    let mut to_insert_2 = CProtoBitVec::<3>::with_capacity(33);
    let mut to_insert_3 = CProtoBitVec::<3>::with_capacity(19);
    let mut empty_insert = CProtoBitVec::<3>::new();
    let mut to_insert_1_extra_a = CProtoBitVec::<3>::with_capacity(1);
    let mut to_insert_1_extra_b = CProtoBitVec::<3>::with_capacity(1);
    let mut to_insert_1_extra_c = CProtoBitVec::<3>::with_capacity(1);
    to_insert_1_extra_a.push(_111)?;
    to_insert_1_extra_b.push(_111)?;
    let proto = CProtoBitVec::<3>::PROTO;
    {
        //                          21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        force_write!(bitvec, 2, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_001_001__usize]);
        //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        force_write!(to_insert_1, 44, [0b__0_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_01__usize, 0b__000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_100_1__usize]);
        //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        force_write!(to_insert_2, 33, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110__usize, 0b__00_000_000_000_000_000_000_000_000_000_110_110_110_110_110_110_110_110_110_110_110_11__usize]);
        //                                21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        force_write!(to_insert_3, 19, [0b__0_000_000_010_001_000_111_110_101_100_011_010_001_000_111_110_101_100_011_010_001_000__usize]);
        let to_insert_1 = to_insert_1.drain();
        let to_insert_2 = to_insert_2.drain();
        let to_insert_3 = to_insert_3.drain();
        let empty_insert = empty_insert.drain();
        let to_insert_1_extra_a = to_insert_1_extra_a.drain();
        let to_insert_1_extra_b = to_insert_1_extra_b.drain();
        let to_insert_1_extra_c = to_insert_1_extra_c.drain();
        assert_bvec_state!("1", proto, bitvec, 2, 85, [0b__0_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_001_001__usize]);
        bitvec.insert_iter(1, to_insert_1)?;
        //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        assert_bvec_state!("2", proto, bitvec, 46, 85, [0b__1_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_010_111_001__usize, 0b__01_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_101_010_11__usize, 0b___000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_001_100_100_1__usize]);
        bitvec.insert_iter(1, to_insert_2)?;
        //                                                 21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        assert_bvec_state!("3", proto, bitvec, 79, 85, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_001__usize, 0b__11_010_111_010_111_010_111_010_111_110_110_110_110_110_110_110_110_110_110_110_110_11__usize, 0b___101_101_101_101_101_101_101_101_010_111_010_111_010_111_010_111_010_111_010_111_010_1__usize, 0b__0_000_000_000_000_000_000_001_100_100_101_101_101_101_101_101_101_101_101_101_101_101__usize]);
        bitvec.insert_iter(33, to_insert_3)?;
        //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        assert_bvec_state!("4", proto, bitvec, 98, 149, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_001__usize, 0b__01_000_111_110_101_100_011_010_001_000_110_110_110_110_110_110_110_110_110_110_110_11__usize, 0b___111_010_111_010_111_010_111_010_111_010_111_110_010_001_000_111_110_101_100_011_010_0__usize, 0b__1_101_101_101_101_101_101_101_101_101_101_010_111_010_111_010_111_010_111_010_111_010__usize, 0b__00_000_000_000_000_000_000_000_000_001_100_100_101_101_101_101_101_101_101_101_101_10__usize]);
        let old_true_cap = bitvec.0.true_cap;
        bitvec.0.true_cap = BitProto::calc_block_count_from_bitwise_count(proto, proto.MAX_CAPACITY);
        bitvec.insert_iter(0, to_insert_1_extra_a)?;
        //                                                  21  20  19  18  17  16  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0             42  41  40  39  38  37  36  35  34  33  32  31  30  29  28  27  26  25  24  23  22 21              63  62  61  60  59  58  57  56  55  54  53  52  51  50  49  48  47  46  45  44  43 42
        assert_bvec_state!("5", proto, bitvec, 99, proto.MAX_CAPACITY, [0b__0_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_110_001_111__usize, 0b__00_111_110_101_100_011_010_001_000_110_110_110_110_110_110_110_110_110_110_110_110_11__usize, 0b___010_111_010_111_010_111_010_111_010_111_110_010_001_000_111_110_101_100_011_010_001_0__usize, 0b__1_101_101_101_101_101_101_101_101_101_010_111_010_111_010_111_010_111_010_111_010_111__usize, 0b__00_000_000_000_000_000_000_000_001_100_100_101_101_101_101_101_101_101_101_101_101_10__usize]);
        assert_error!("6", bitvec.insert_iter(1000, to_insert_1_extra_c));
        bitvec.0.len = proto.MAX_CAPACITY;
        bitvec.insert_iter(0, empty_insert)?;
        assert_error!("7", bitvec.insert_iter(0, to_insert_1_extra_b));
        bitvec.0.true_cap = old_true_cap;
    }
    assert_bvec_state!("8", proto, to_insert_1, 0, 64, [0usize; 0]);
    assert_bvec_state!("9", proto, to_insert_2, 0, 42, [0usize; 0]);
    assert_bvec_state!("10", proto, to_insert_3, 0, 21, [0usize; 0]);
    Ok(())
}

#[test]
fn grow() -> Result<(), String> {
    let mut bitvec = CProtoBitVec::<3>::new();
    let proto = CProtoBitVec::<3>::PROTO;
    assert_bvec_state!("1", proto, bitvec, 0, 0, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(0)?;
    assert_bvec_state!("2", proto, bitvec, 0, 0, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(1)?;
    assert_bvec_state!("3", proto, bitvec, 0, 21, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(21)?;
    assert_bvec_state!("4", proto, bitvec, 0, 21, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(22)?;
    assert_bvec_state!("5", proto, bitvec, 0, 42, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(42)?;
    assert_bvec_state!("6", proto, bitvec, 0, 42, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(43)?;
    assert_bvec_state!("7", proto, bitvec, 0, 64, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(64)?;
    assert_bvec_state!("8", proto, bitvec, 0, 64, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(65)?;
    assert_bvec_state!("9", proto, bitvec, 0, 85, [0usize; 0]);
    bitvec.grow_exact_for_total_elements_if_needed(86)?;
    assert_bvec_state!("10", proto, bitvec, 0, 106, [0usize; 0]);

    bitvec = CProtoBitVec::<3>::new();
    assert_bvec_state!("11", proto, bitvec, 0, 0, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(0)?;
    assert_bvec_state!("12", proto, bitvec, 0, 0, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(1)?;
    assert_bvec_state!("13", proto, bitvec, 0, 21, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(21)?;
    assert_bvec_state!("14", proto, bitvec, 0, 21, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(22)?;
    assert_bvec_state!("15", proto, bitvec, 0, 64, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(64)?;
    assert_bvec_state!("16", proto, bitvec, 0, 64, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(65)?;
    assert_bvec_state!("17", proto, bitvec, 0, 128, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(128)?;
    assert_bvec_state!("18", proto, bitvec, 0, 128, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(129)?;
    assert_bvec_state!("19", proto, bitvec, 0, 213, [0usize; 0]);
    bitvec.grow_for_total_elements_if_needed(214)?;
    assert_bvec_state!("20", proto, bitvec, 0, 341, [0usize; 0]);
    Ok(())
}