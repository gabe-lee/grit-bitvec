#[cfg(test)]
mod test {
    use crate::*;
    use std::slice::from_raw_parts as slice_from_raw;

    macro_rules! assert_bvec_state {
        ($MARK:literal, $VEC:ident, $LEN:expr, $CAP:expr, $DATA:expr) => {
            assert_eq!($LEN, $VEC.len, "\n{} FAIL: incorrect length:\n\tEXP: {}\n\tGOT: {}\n", $MARK, $LEN, $VEC.len);
            assert_eq!($CAP, $VEC.cap, "\n{} FAIL: incorrect capacity:\n\tEXP: {}\n\tGOT: {}\n", $MARK, $CAP, $VEC.cap);
            let got_slice = unsafe {slice_from_raw($VEC.ptr.as_ptr(), $VEC.calc_real_len_from_sub_len())};
            let mut exp_string = String::new();
            let mut got_string = String::new();
            let mut fail = false;
            let mut exp_done = false;
            let mut got_done = false;
            if got_slice.len() != $DATA.len() {
                fail = true;
            }
            let mut idx: usize = 0;
            while !exp_done && !got_done {
                let mut exp_val: usize = 0;
                let mut got_val: usize = 0;
                if idx < $DATA.len() {
                    exp_val = $DATA[idx];
                    exp_string.push_str(&format!("{:b} ", exp_val));
                } else {
                    exp_done = true;
                }
                if idx < got_slice.len() {
                    got_val = got_slice[idx];
                    got_string.push_str(&format!("{:b} ", got_val));
                } else {
                    got_done = true;
                }
                if !fail {
                    fail = !(exp_val == got_val);
                }
                idx += 1;
            }
            if fail {
                panic!("\n{} FAIL: incorrect data:\n\tEXP DATA LEN: {}\n\tGOT_DATA_LEN: {}\n\tEXP DATA: {}\n\tGOT DATA: {}\n", $MARK, $DATA.len(), got_slice.len(), exp_string, got_string);
            }
        };
    }

    #[test]
    fn bxvec_u4() -> Result<(), String> {
        let a: u8 = 0b_1111;
        let b: u8 = 0b_0110;
        let c: u8 = 0b_1010;
        let d: u8 = 0b_0000;
        let mut bvec: BitVec<u8_as_u4> = BitVec::new();
        assert_bvec_state!("1", bvec, 0, 0, [0usize; 0]);
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        assert_bvec_state!("2", bvec, 1, 16, [0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1111__usize]);
        bvec.push_custom_grow(b, Grow::Double)?; // 0110
        assert_bvec_state!("3", bvec, 2, 16, [0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0110_1111__usize]);
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        assert_bvec_state!("4", bvec, 3, 16, [0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1111_0110_1111__usize]);
        bvec.push_custom_grow(b, Grow::Double)?; // 0110
        assert_bvec_state!("5", bvec, 4, 16, [0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0110_1111_0110_1111__usize]);
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        bvec.push_custom_grow(b, Grow::Double)?; // 0110
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        bvec.push_custom_grow(b, Grow::Double)?; // 0110
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        bvec.push_custom_grow(b, Grow::Double)?; // 0110
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        bvec.push_custom_grow(b, Grow::Double)?; // 0110
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        bvec.push_custom_grow(b, Grow::Double)?; // 0110
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        bvec.push_custom_grow(b, Grow::Double)?; // 0110
        //                                           15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0
        assert_bvec_state!("6", bvec, 16, 16, [0b__0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111__usize]);
        bvec.push_custom_grow(a, Grow::Double)?; // 1111
        //                                           15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16
        assert_bvec_state!("7", bvec, 17, 48, [0b__0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1111__usize]);
        bvec.append_custom_grow([b, a, b, a, b, a, b, a, b, a, b, a, b, a, b], Grow::Double)?;
        //                                           15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16
        assert_bvec_state!("8", bvec, 32, 48, [0b__0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111__usize, 0b__0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111__usize]);
        bvec.insert_custom_grow(23, c, Grow::Double)?;
        //                                           15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("9", bvec, 33, 48, [0b__0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111__usize, 0b__1111_0110_1111_0110_1111_0110_1111_0110_1010_1111_0110_1111_0110_1111_0110_1111__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0110__usize]);
        bvec.insert_custom_grow(23, c, Grow::Double)?;
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("10", bvec, 34, 48, [0b__0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111__usize, 0b__0110_1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0110_1111__usize]);
        bvec.insert_custom_grow(0, d, Grow::Double)?;
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("11", bvec, 35, 48, [0b__1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0000__usize, 0b__1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111_0110__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0110_1111_0110__usize]);
        bvec.insert_custom_grow(35, a, Grow::Double)?;
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("12", bvec, 36, 48, [0b__1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0000__usize, 0b__1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111_0110__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1111_0110_1111_0110__usize]);
        let mut val = bvec.pop();
        assert_eq!(val, Ok(a));
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("13", bvec, 35, 48, [0b__1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0000__usize, 0b__1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111_0110__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0110_1111_0110__usize]);
        val = bvec.remove(33);
        assert_eq!(val, Ok(a));
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("14", bvec, 34, 48, [0b__1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0000__usize, 0b__1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111_0110__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0110_0110__usize]);
        val = bvec.remove(32);
        assert_eq!(val, Ok(b));
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("15", bvec, 33, 48, [0b__1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0000__usize, 0b__1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111_0110__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0110__usize]);
        val = bvec.remove(32);
        assert_eq!(val, Ok(b));
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("16", bvec, 32, 48, [0b__1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0000__usize, 0b__1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111_0110__usize]);
        bvec.insert_custom_grow(32, a, Grow::Double)?;
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("17", bvec, 33, 48, [0b__1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0000__usize, 0b__1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111_0110__usize, 0b__0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1111__usize]);
        val = bvec.pop();
        assert_eq!(val, Ok(a));
        //                                            15   14   13   12   11   10    9    8    7    6    5    4    3    2    1    0               31   30   29   28   27   26   25   24   23   22   21   20   19   18   17   16               47   46   45   44   43   42   41   40   39   38   37   36   35   34   33   32
        assert_bvec_state!("18", bvec, 32, 48, [0b__1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0110_1111_0000__usize, 0b__1111_0110_1111_0110_1111_0110_1010_1010_1111_0110_1111_0110_1111_0110_1111_0110__usize]);
        //TODO: Finish testing for u4, u3, u5
        Ok(())
    }
}